---
interface Props {
  // Define which third-party scripts to load
  analytics?: boolean;
  substack?: boolean;
  socialEmbed?: boolean;
}

// Define script configuration types
interface ScriptConfig {
  src: string;
  dataDomain?: string;
  defer?: boolean;
  async?: boolean;
  priority: 'high' | 'medium' | 'low';
  requiresCookieConsent?: boolean;
}

const { 
  analytics = false, 
  substack = false,
  socialEmbed = false 
} = Astro.props;

// Define script configurations
const scripts: Record<string, ScriptConfig> = {
  analytics: {
    src: 'https://plausible.io/js/script.js',
    dataDomain: 'ace139.github.io',
    defer: true,
    priority: 'low',
    requiresCookieConsent: true
  },
  substack: {
    src: 'https://substackapi.com/widget.js',
    async: true,
    priority: 'medium',
    requiresCookieConsent: true
  },
  socialEmbed: {
    src: 'https://platform.twitter.com/widgets.js',
    async: true,
    priority: 'low',
    requiresCookieConsent: true
  }
};

// Group scripts by priority
const highPriorityScripts: ScriptConfig[] = [];
const mediumPriorityScripts: ScriptConfig[] = [];
const lowPriorityScripts: ScriptConfig[] = [];

if (analytics) {
  lowPriorityScripts.push(scripts.analytics);
}
if (substack) {
  mediumPriorityScripts.push(scripts.substack);
}
if (socialEmbed) {
  lowPriorityScripts.push(scripts.socialEmbed);
}
---

<Fragment>
  <!-- Resource hints for third-party domains -->
  {analytics && (
    <link rel="preconnect" href="https://plausible.io" crossorigin />
  )}
  {substack && (
    <link rel="preconnect" href="https://substackapi.com" crossorigin />
  )}
  {socialEmbed && (
    <link rel="preconnect" href="https://platform.twitter.com" crossorigin />
  )}

  <!-- High priority scripts (none currently) -->
  {highPriorityScripts.map(script => (
    <script 
      src={script.src} 
      data-domain={script.dataDomain}
      async={script.async}
      defer={script.defer}
    />
  ))}

  <!-- Cookie consent banner -->
  <div id="cookie-consent-banner" class="fixed bottom-0 left-0 right-0 bg-gray-100 dark:bg-gray-800 p-4 shadow-lg transform translate-y-full transition-transform duration-300 z-50 hidden">
    <div class="max-w-6xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
      <p class="text-sm">
        This website uses cookies for analytics and to enhance the user experience. 
        <a href="/privacy" class="text-blue-600 dark:text-blue-400 underline">Learn more</a>
      </p>
      <div class="flex gap-2">
        <button id="cookie-consent-reject" class="px-4 py-2 text-sm bg-gray-200 dark:bg-gray-700 rounded">Reject</button>
        <button id="cookie-consent-accept" class="px-4 py-2 text-sm bg-blue-600 text-white rounded">Accept</button>
      </div>
    </div>
  </div>

  <!-- Medium priority scripts - Load after initial render -->
  <script is:inline define:vars={{ mediumPriorityScripts }}>
    // Cookie consent handling
    (function() {
      function showCookieConsentBanner() {
        const banner = document.getElementById('cookie-consent-banner');
        if (banner) {
          banner.classList.remove('hidden');
          setTimeout(() => {
            banner.classList.remove('translate-y-full');
          }, 100);
        }
      }

      function hideCookieConsentBanner() {
        const banner = document.getElementById('cookie-consent-banner');
        if (banner) {
          banner.classList.add('translate-y-full');
          setTimeout(() => {
            banner.classList.add('hidden');
          }, 300);
        }
      }

      // Check for existing consent
      try {
        const cookieConsent = localStorage.getItem('cookie-consent');
        if (cookieConsent === null) {
          // Show banner only if consent hasn't been given or rejected
          document.addEventListener('DOMContentLoaded', showCookieConsentBanner);
        }
      } catch (e) {
        console.warn('Error accessing localStorage:', e);
      }

      // Set up event listeners for the consent buttons
      document.addEventListener('DOMContentLoaded', () => {
        const acceptButton = document.getElementById('cookie-consent-accept');
        const rejectButton = document.getElementById('cookie-consent-reject');
        
        if (acceptButton) {
          acceptButton.addEventListener('click', () => {
            try {
              localStorage.setItem('cookie-consent', 'accepted');
            } catch (e) {
              console.warn('Error setting localStorage:', e);
            }
            hideCookieConsentBanner();
            // Load consent-requiring scripts
            loadConsentRequiringScripts();
          });
        }
        
        if (rejectButton) {
          rejectButton.addEventListener('click', () => {
            try {
              localStorage.setItem('cookie-consent', 'rejected');
            } catch (e) {
              console.warn('Error setting localStorage:', e);
            }
            hideCookieConsentBanner();
          });
        }
      });

      // Function to load scripts that require consent
      function loadConsentRequiringScripts() {
        // This will be called if consent is given
        // The actual loading will be handled by the priority-based loaders
      }
    })();

    // Load medium priority scripts after page load
    window.addEventListener('load', () => {
      setTimeout(() => {
        // Create an array of script configurations
        // This avoids TypeScript issues with the previous approach
        const mediumPriorityScriptsArray = [];
        
        // Use the mediumPriorityScripts variable passed from Astro component
        for (const script of mediumPriorityScripts) {
          mediumPriorityScriptsArray.push({
            src: script.src,
            async: script.async || false,
            defer: script.defer || false,
            dataDomain: script.dataDomain || null,
            requiresCookieConsent: script.requiresCookieConsent || false
          });
        }
        
        mediumPriorityScriptsArray.forEach(script => {
          // Skip scripts that require consent if consent not given
          try {
            if (script.requiresCookieConsent && localStorage.getItem('cookie-consent') !== 'accepted') {
              return;
            }
          } catch (e) {
            console.warn('Error accessing localStorage:', e);
            return; // Skip if we can't check consent
          }
          
          const scriptEl = document.createElement('script');
          scriptEl.src = script.src;
          scriptEl.async = script.async;
          scriptEl.defer = script.defer;
          if (script.dataDomain) {
            scriptEl.setAttribute('data-domain', script.dataDomain);
          }
          document.body.appendChild(scriptEl);
        });
      }, 1000); // 1 second delay
    });
  </script>

  <!-- Low priority scripts - Load when user becomes inactive -->
  <script is:inline define:vars={{ lowPriorityScripts }}>
    // Load low priority scripts when user becomes inactive
    (function() {
      let userActive = true;
      let lowPriorityLoaded = false;
      
      // Define low priority scripts array
      const lowPriorityScriptsArray = [];
      
      // Use the lowPriorityScripts variable passed from Astro component
      for (const script of lowPriorityScripts) {
        lowPriorityScriptsArray.push({
          src: script.src,
          async: script.async || false,
          defer: script.defer || false,
          dataDomain: script.dataDomain || null,
          requiresCookieConsent: script.requiresCookieConsent || false
        });
      }

      function loadLowPriorityScripts() {
        if (lowPriorityLoaded) return;
        lowPriorityLoaded = true;

        lowPriorityScriptsArray.forEach(script => {
          // Skip scripts that require consent if consent not given
          try {
            if (script.requiresCookieConsent && localStorage.getItem('cookie-consent') !== 'accepted') {
              return;
            }
          } catch (e) {
            console.warn('Error accessing localStorage:', e);
            return; // Skip if we can't check consent
          }
          
          const scriptEl = document.createElement('script');
          scriptEl.src = script.src;
          scriptEl.async = script.async;
          scriptEl.defer = script.defer;
          if (script.dataDomain) {
            scriptEl.setAttribute('data-domain', script.dataDomain);
          }
          document.body.appendChild(scriptEl);
        });
      }

      // Check user inactivity
      let inactivityTimer;
      function resetInactivityTimer() {
        userActive = true;
        clearTimeout(inactivityTimer);
        inactivityTimer = setTimeout(() => {
          userActive = false;
          loadLowPriorityScripts();
        }, 5000); // 5 seconds of inactivity
      }

      // Monitor user activity
      ['mousemove', 'keydown', 'scroll', 'touchstart'].forEach(event => {
        document.addEventListener(event, resetInactivityTimer, { passive: true });
      });

      // Fallback: Load after 10 seconds regardless of activity
      setTimeout(loadLowPriorityScripts, 10000);

      // Load when user scrolls near bottom
      if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              loadLowPriorityScripts();
              observer.disconnect();
            }
          });
        }, { rootMargin: '200px' });

        // Observe footer or bottom of page
        document.addEventListener('DOMContentLoaded', () => {
          const footer = document.querySelector('footer');
          if (footer) observer.observe(footer);
        });
      }
    })();
  </script>
</Fragment>
