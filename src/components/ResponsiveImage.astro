---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  sizes?: string;
  widths?: number[];
  formats?: ('avif' | 'webp' | 'jpeg' | 'png')[];
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  fetchpriority,
  sizes = '(min-width: 1024px) 1024px, 100vw',
  widths: widthsProp,
  formats: formatsProp,
} = Astro.props;

const isMeta = typeof src === 'object';
const isSvg = isMeta && (src as ImageMetadata).format === 'svg';

// Compute defaults from metadata when available
const computedWidth = width ?? (isMeta ? (src as ImageMetadata).width : undefined);
const computedHeight = height ?? (isMeta ? (src as ImageMetadata).height : undefined);
const aspectRatio = computedWidth && computedHeight ? computedWidth / computedHeight : undefined;

// Final source for <img> fallback (SVG or string path)
const finalSrc = isSvg
  ? isMeta
    ? (src as ImageMetadata).src
    : (src as string)
  : !isMeta
    ? (src as string)
    : undefined;

// Determine fallback format for <Picture /> based on metadata
const metaFormat = isMeta ? (src as ImageMetadata).format : undefined;
const fallbackFormat = metaFormat === 'jpg' ? 'jpeg' : metaFormat;

// Compute final responsive widths and formats
const defaultWidths = [320, 480, 768, 1024, 1280];
const widthsFinal = widthsProp && widthsProp.length ? widthsProp : defaultWidths;
const defaultFormats: ('avif' | 'webp')[] = ['avif', 'webp'];
let formatsFinal = (formatsProp && formatsProp.length ? formatsProp : defaultFormats).slice();
if (fallbackFormat && !formatsFinal.includes(fallbackFormat as any)) {
  formatsFinal = [...formatsFinal, fallbackFormat as any];
}
---

<div
  class={`relative overflow-hidden ${className}`}
  style={aspectRatio ? `aspect-ratio: ${aspectRatio};` : undefined}
>
  <div class="h-full w-full">
    {
      isMeta && !isSvg ? (
        <Picture
          src={src as ImageMetadata}
          widths={widthsFinal}
          sizes={sizes}
          formats={formatsFinal as any}
          alt={alt}
          loading={loading}
          fetchpriority={fetchpriority}
          class={`h-full w-full object-cover`}
        />
      ) : (
        <img
          src={finalSrc as string}
          alt={alt}
          width={computedWidth}
          height={computedHeight}
          sizes={sizes}
          loading={loading}
          fetchpriority={fetchpriority}
          decoding="async"
          class={`h-full w-full object-cover`}
        />
      )
    }
  </div>
</div>
